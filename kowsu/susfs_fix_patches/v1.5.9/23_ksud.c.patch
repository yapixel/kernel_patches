diff --git a/kernel/ksud.c b/kernel/ksud.c
index 1111111..2222222 100644
--- a/kernel/ksud.c
+++ b/kernel/ksud.c
@@ -11,6 +11,10 @@
 #include <linux/uaccess.h>
 #include <linux/workqueue.h>

+#ifdef CONFIG_KSU_SUSFS_SUS_SU
+#include <linux/susfs_def.h>
+#endif
+
 #include "allowlist.h"
 #include "arch.h"
 #include "klog.h" // IWYU pragma: keep
@@ -56,6 +60,10 @@ static struct work_struct stop_input_hook_work;
 bool ksu_execveat_hook __read_mostly = true;

+ #ifdef CONFIG_KSU_SUSFS_SUS_SU
+bool susfs_is_sus_su_ready = false;
+#endif // #ifdef CONFIG_KSU_SUSFS_SUS_SU
+
 u32 ksu_devpts_sid;

-void on_post_fs_data(void)
+void ksu_on_post_fs_data(void)
 {
 	static bool done = false;
 	if (done) {
@@ -66,7 +74,7 @@ void on_post_fs_data(void)
 	pr_info("on_post_fs_data!\n");
 	ksu_load_allow_list();
 	// sanity check, this may influence the performance
 	stop_input_hook();

 	ksu_devpts_sid = ksu_get_devpts_sid();
 	pr_info("devpts sid: %d\n", ksu_devpts_sid);
 }
@@ -142,7 +150,7 @@ static int ksu_handle_bprm_ksud(const char *filename, const char *argv1, const char *envp, size_t envp_len)
 	if (!init_second_stage_executed 
 		&& (!memcmp(filename, system_bin_init, sizeof(system_bin_init) - 1))) {
 		if (argv1 && !strcmp(argv1, "second_stage")) {
 			pr_info("%s: /system/bin/init second_stage executed\n", __func__);
-			apply_kernelsu_rules();
+			ksu_apply_kernelsu_rules();
 			init_second_stage_executed = true;
 			ksu_android_ns_fs_check();
 		}
@@ -193,11 +201,11 @@ first_app_process:
 	if (first_app_process && !memcmp(filename, app_process, sizeof(app_process) - 1)) {
 		first_app_process = false;
 		pr_info("%s: exec app_process, /data prepared, second_stage: %d\n", __func__, init_second_stage_executed);
-		on_post_fs_data();
+		ksu_on_post_fs_data();
 		stop_execve_hook();
 	}

 	return 0;
 }
+
+#ifdef MODULE
+static int ksu_handle_execveat_ksud(int *fd, struct filename **filename_ptr,
+			struct user_arg_ptr *argv, struct user_arg_ptr *envp,
+			int *flags)
+{
+	const char *path = (*filename_ptr)->name;
+
+	if (!path)
+		return 0;
+
+	static const char system_bin_init[] = "/system/bin/init";
+	static const char old_system_init[] = "/init";
+	static bool init_second_stage_executed = false;
+	static const char app_process[] = "/system/bin/app_process";
+	static bool first_app_process = true;
+	static const char init[] = "/init";
+
+	// (trimmed: full implementation handles argv/envp parsing and ksu_apply_kernelsu_rules)
+
+	return ksu_handle_bprm_ksud(path, NULL, NULL, 0);
+}
+#endif // MODULE
@@ -821,6 +897,11 @@ static void stop_vfs_read_hook()
 	pr_info("stop vfs_read_hook\n");
 #endif
+
+#ifdef CONFIG_KSU_SUSFS_SUS_SU
+	susfs_is_sus_su_ready = true;
+	pr_info("susfs: sus_su is ready\n");
+#endif
 }

 static void stop_execve_hook()
