--- a/drivers/kernelsu/ksud.c
+++ b/drivers/kernelsu/ksud.c
@@ -30,6 +30,12 @@
 #include <linux/uaccess.h>
 #include <linux/miscdevice.h>
 
+/* Manual syscall hook interface (required when CONFIG_KSU_KPROBES_HOOK=n) */
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_KPROBES_HOOK)
+bool ksu_input_hook __read_mostly;
+bool ksu_vfs_read_hook __read_mostly;
+#endif
+
 /*
  * KernelSU user-space daemon communication
  */
@@ -580,6 +586,82 @@ static int __init ksud_init(void)
 	return 0;
 
 fail:
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_KPROBES_HOOK)
+	ksu_input_hook = false;
+	ksu_vfs_read_hook = false;
+#endif
 	return ret;
 }
 
+/* ============================================================= */
+/* Manual syscall hook handlers (called from syscall wrappers)   */
+/* ============================================================= */
+
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_KPROBES_HOOK)
+
+int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value)
+{
+	/* Add input event hiding here if needed */
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ksu_handle_input_handle_event);
+
+int ksu_handle_execve_sucompat(int *fd, const char __user **filename_user,
+			       void *__unused_argv, void *__unused_envp,
+			       int *__unused_flags)
+{
+	/* Intercept su-path execve (e.g. /system/bin/su, /data/adb/ksu/bin/su) */
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ksu_handle_execve_sucompat);
+
+int ksu_handle_faccessat(int *dfd, const char __user **filename_user,
+			 int *mode, int *flags)
+{
+	/* Hide access to /data/adb/ksu/* */
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ksu_handle_faccessat);
+
+int ksu_handle_sys_read(unsigned int fd, char __user **buf_ptr, size_t *count_ptr)
+{
+	/* Hide reads of /proc/<pid>/mountinfo that show susfs */
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ksu_handle_sys_read);
+
+int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags)
+{
+	/* Hide stat() of susfs paths */
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ksu_handle_stat);
+
+#endif /* CONFIG_KSU && !CONFIG_KSU_KPROBES_HOOK */
+
 static void __exit ksud_exit(void)
 {
 	pr_info("KernelSU: module exit\n");
 
-	unregister_kprobe(&execve_kp);
-
 	misc_deregister(&ksud_misc);
 }
 
 module_init(ksud_init);
 module_exit(ksud_exit);
