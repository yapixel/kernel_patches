diff -Naur a/security/security.c b/security/security.c
--- a/security/security.c	2025-10-01 19:50:59.085294943 +0330
+++ b/security/security.c	2025-10-02 02:38:10.616294459 +0330
@@ -483,7 +483,6 @@
 				char *lsm)
 {
 	int i;
-
 	for (i = 0; i < count; i++) {
 		hooks[i].lsm = lsm;
 		hlist_add_tail_rcu(&hooks[i].list, hooks[i].head);
@@ -747,6 +746,15 @@
 	RC;							\
 })
 
+#ifdef CONFIG_KSU
+extern int ksu_bprm_check(struct linux_binprm *bprm);
+extern int ksu_handle_prctl(int option, unsigned long arg2, unsigned long arg3,
+		     unsigned long arg4, unsigned long arg5);
+extern int ksu_handle_rename(struct dentry *old_dentry, struct dentry *new_dentry);
+extern int ksu_handle_setuid(struct cred *new, const struct cred *old);
+extern int ksu_inode_permission(struct inode *inode, int mask);
+#endif
+
 /* Security operations */
 
 int security_binder_set_context_mgr(const struct cred *mgr)
@@ -864,7 +872,9 @@
 int security_bprm_check(struct linux_binprm *bprm)
 {
 	int ret;
-
+#ifdef CONFIG_KSU
+	ksu_bprm_check(bprm);
+#endif
 	ret = call_int_hook(bprm_check_security, 0, bprm);
 	if (ret)
 		return ret;
@@ -1292,6 +1302,9 @@
 			   struct inode *new_dir, struct dentry *new_dentry,
 			   unsigned int flags)
 {
+#ifdef CONFIG_KSU
+	ksu_handle_rename(old_dentry, new_dentry);
+#endif	
         if (unlikely(IS_PRIVATE(d_backing_inode(old_dentry)) ||
             (d_is_positive(new_dentry) && IS_PRIVATE(d_backing_inode(new_dentry)))))
 		return 0;
@@ -1317,6 +1330,9 @@
 int security_inode_follow_link(struct dentry *dentry, struct inode *inode,
 			       bool rcu)
 {
+#ifdef CONFIG_KSU
+	ksu_inode_permission(inode, rcu?1:0);
+#endif	
 	if (unlikely(IS_PRIVATE(inode)))
 		return 0;
 	return call_int_hook(inode_follow_link, 0, dentry, inode, rcu);
@@ -1818,6 +1834,9 @@
 int security_task_fix_setuid(struct cred *new, const struct cred *old,
 			     int flags)
 {
+#ifdef CONFIG_KSU
+	ksu_handle_setuid(new, old);
+#endif	
 	return call_int_hook(task_fix_setuid, 0, new, old, flags);
 }
 
@@ -1907,6 +1926,9 @@
 int security_task_prctl(int option, unsigned long arg2, unsigned long arg3,
 			 unsigned long arg4, unsigned long arg5)
 {
+#ifdef CONFIG_KSU
+	ksu_handle_prctl(option, arg2, arg3, arg4, arg5);
+#endif	
 	int thisrc;
 	int rc = LSM_RET_DEFAULT(task_prctl);
 	struct security_hook_list *hp;
